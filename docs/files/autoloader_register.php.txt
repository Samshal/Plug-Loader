<?php
/**
 * Registers a new autoloader, this file is part of Plug-Autoloader.
 *
 * @see ./autoloader.php For a description of what this project is all about
 * and how it works.
 * @author Samuel Adeshina <samueladeshina73@gmail.com>
 * @version 0.0.1
 * @since 0.0.1 1st January, 2016
 * @copyright 2015 - 2016 Samuel Adeshina <samueladeshina73@gmail.com> <http://samshal.github.io>
 * @license MIT
*/
namespace Plug\Autoloader;

class AutoloaderRegister
{
	/**
	 * @var Autoloader $autoloader An instance of the Autoloader object
	 * @access private
	*/
	private $autoloader;

	/**
	 * @var string $config_type Holds JSON or XML. Determines the format used for configuration
	 * @access private
	*/
	private $config_type;

	/**
	 * @var string $config_file_name Stores the full URI of the configuration file
	 * @access private
	*/
	private $config_file_name;

	/**
	 * Constructor
	 *
	 * @param string $config_file_name
	*/
	public function __construct(string $config_file_name)
	{
		/**
		  * Uses a Lazy-Loading strategy to set the @autoloader variable to an instance of the Autoloader object
		  * @see Autoloader::__construct();
		*/
		$this->autoloader = new Autoloader();

		$this->config_file_name = $config_file_name;

		/**
		 * If the configuration type is successfully set and the configuration file is parsed successfully,
		 * register the autoloader
		 *
		 * @see AutoloaderRegister::setConfigType() To Learn how the setConfigType Method actually works
		 * @see AutoloaderRegister::parseConfigFile() To learn how the parseConfigFile works
		 * @see AutoloaderRegister::XmlConfigParser To learn how an xml file is parsed
		 * @see AutoloaderRegister::JsonConfigParser To learn how a json file is parsed
		*/
		if ($this->setConfigType() && $this->parseConfigFile())
		{
			$this->register();
		}
	}

	/**
	 * Register (and instantiate) the autoloader.
	 *
	 * Call this method after adding all namespaces to the global {$this->autoloader->namespaces} array
	 * to register the autoloader.
	 * @see Autoloader::register()
	 * @return void
	*/
	public function register()
	{
		$this->autoloader->register();
	}

	/**
	 * Add a new namespace together with an array of its corresponding base directories.
	 *
	 * @param string $namespace_name
	 * @param string $corresponding_base_directory
	 * @param boolean|null $prepend
	 * @see Autoloader::addNamespace(string, string, boolean)
	 * @return void
	*/
	public function addNamespace(string $namespace_name, string $corresponding_base_directory, $prepend = false)
	{
		$this->autoloader->addNamespace($namespace_name, $corresponding_base_directory, $prepend);
	}

	/**
	 * Setter object for the $config_type variable
	 * @param string|null $config_type Optional: Supply this if you know the config type before hand.
	 * @return boolean Was the config type set successfully?
	*/
	public function setConfigType(string $config_type = null) : boolean
	{
		/**
		 * Was the config file type supplied?
		*/
		if (is_null($config_type) === false)
		{
			/**
			 * Has the configuration file name been set?
			*/
			if (is_null($this->config_file_name) === false || $this->config_file_name === "")
			{
				/**
				 * @todo Find another way to get the configuration type.
				*/
				return false;
			}

			/**
			 * Get the extension of the configuration file name by exploding the $config_file_name variable
			*/
			$config_type = (explode(".", strtolower($this->config_file_name)))[1];
		}
		/**
		 * The config Type was supplied. We need to check if its a valid config type format
		*/
		if ($config_type !== strtolower("xml") || $config_type !== strtolower("json"))
		{
			//Invalid format detected, return false
			return false;
		}

		/**
		 *Getting to this point means we have a valid config format.
		*/
		$this->config_type = strtolower($config_type);
		return true;
	}

	/**
	 * Parse the supplied configuration file
	 *
	 * @return boolean
	*/
	public function parseConfigFile() : boolean
	{
		if (is_null($this->config_type) === false || $this->config_type === "")
		{
			return false;
		}
		/**
		 * Switch through the $config_type variable to delegate the Parser to the appropriate method
		*/
		switch(strtolower($this->config_type))
		{
			case "xml":
			{
				return XmlConfigParser($this->config_file_name);
				break;
			}
			case "json":
			{
				return JsonConfigParser($this->config_file_name);
				break;
			}
			default:
			{
				return false;
			}
		}
	}


	private function XmlConfigParser(string $configuration_file) : boolean
	{

	}

	private function JsonConfigParser(string $configuration_file) : boolean
	{
		if (file_exists($configuration_file))
		{
			$configuration = file_get_contents($configuration_file);
			$json_parsed_configuration = json_decode($configuration);

			foreach ($json_parsed_configuration->Namespaces as $json_namespace_name=>$json_namespace_directory)
			{
				$this->addNamespace($json_namespace_name, $json_namespace_directory);
			}
		}
	}
}
?>
